def "str unindent" [] {
  let text = $in
  let length = ($text | lines | length)

  # Drop first and last line if empty
  let lines = (
    $text
    | lines
    | wrap text
    | enumerate
    | flatten
    | filter {|line|
        match [
          $line.index
          ($line.text | str trim)
        ] {
          [0 ''] => false
          [($length - 1) ''] => false
          _ => true
        }

      }
  )

  let minimumIndent = (
    $lines | insert indent {|line|
      if ($line.text | str trim | is-empty) {
        null
      } else {
        $line.text
        | parse -r '^(?<indent>\s+)'
        | get indent.0?
        | default '' |
        str length
      }
    }
    | sort-by indent
    | first
    | get indent
  )

  let removeSpaces = ('' | fill -c ' ' -w $minimumIndent)

  $lines
  | update text {|line|
      $line.text 
      | str replace -r $'^($removeSpaces)' ''
    }
  | get text
  | to text

}

def initialFile [file] {
  if ($file | path exists) {
    rm $file
  }

  "
   # This file is automatically generated by `config build`
   # Do not edit this file directly
   # Run `config build --help` for more information
  "
  | str unindent
  | $in + "\n"
  | save $file
}

def getNuFiles [dir] {
  if ($dir | path exists) {
    try {
      ls (($dir + '/*.nu') | into glob)
    } catch { 
      []
    }
  } else {
    []
  }
}

def loadKeybindings [--fromDir:string, --toConfigFile:string] {
  let dir = $'($nu.default-config-dir)/($fromDir)'
  '
  if $nu.is-interactive {
    $env.config.keybindings = ($env.config?.keybindings? | default [])
  '
  | str unindent
  | save --append $toConfigFile

  for file in (getNuFiles $dir) {
    $"  $env.config.keybindings ++= \(source '($file.name)')\n" | save --append $toConfigFile
    print $"Added Keybinding ($file.name) to ($toConfigFile)"
  }

  "}\n" | save --append $toConfigFile
}

def autoSource [--fromDir:string, --toConfigFile:string] {
  let dir = $'($nu.default-config-dir)/($fromDir)'

  for file in (getNuFiles $dir) {
    $"source '($file.name)'\n" | save --append $toConfigFile
    print $"Added Config ($file.name) to ($toConfigFile)"
  }
}

def useModules [--fromDir:string, --toConfigFile:string] {
  let dir = $'($nu.default-config-dir)/($fromDir)'
    
  for file in (getNuFiles $dir) {
    $"use '($file.name)' *\n" | save --append $toConfigFile
    print $"Added Module ($file.name) to ($toConfigFile)"
  }
}

export def "config build" [] {
  initialFile $nu.env-path
  initialFile $nu.config-path
  initialFile $nu.loginshell-path
  touch ~/.local/share/nushell/variables.yaml

  # Load initial universal variables
  '
  open ~/.local/share/nushell/variables.yaml | load-env
  '
  | str unindent | $in + "\n" | save --append $nu.config-path

  # Create config files based on components in each directory
  useModules --fromDir 'env-modules' --toConfigFile $nu.env-path
  autoSource --fromDir 'env' --toConfigFile $nu.env-path
  autoSource --fromDir 'env-autoload' --toConfigFile $nu.env-path

  useModules --fromDir 'modules' --toConfigFile $nu.config-path
  useModules --fromDir 'config-modules' --toConfigFile $nu.config-path
  autoSource --fromDir 'config' --toConfigFile $nu.config-path
  autoSource --fromDir 'config-autoload' --toConfigFile $nu.config-path
  loadKeybindings --fromDir 'keybindings' --toConfigFile $nu.config-path

  useModules --fromDir 'login-modules' --toConfigFile $nu.loginshell-path
  autoSource --fromDir 'login' --toConfigFile $nu.loginshell-path
  autoSource --fromDir 'login-autoload' --toConfigFile $nu.loginshell-path

}